digraph "template" {
StateS3Bucket [color=black, label="StateS3Bucket\n<AWS::S3::Bucket>", shape=ellipse, type=Resource];
ExecutorLambdaServiceRole [color=black, label="ExecutorLambdaServiceRole\n<AWS::IAM::Role>", shape=ellipse, type=Resource];
ExecutorLambdaLogGroup [color=black, label="ExecutorLambdaLogGroup\n<AWS::Logs::LogGroup>", shape=ellipse, type=Resource];
ExecutorLambdaFunction [color=black, label="ExecutorLambdaFunction\n<AWS::Lambda::Function>", shape=ellipse, type=Resource];
ExecutorLambdaInvokeConfig [color=black, label="ExecutorLambdaInvokeConfig\n<AWS::Lambda::EventInvokeConfig>", shape=ellipse, type=Resource];
ExecutionRole [color=black, label="ExecutionRole\n<AWS::IAM::Role>", shape=ellipse, type=Resource];
ExecutorLambdaServiceRole -> StateS3Bucket  [color=black, key=0, label=GetAtt, source_paths="['Properties', 'Policies', 0, 'PolicyDocument', 'Statement', 2, 'Resource']"];
ExecutorLambdaFunction -> StateS3Bucket  [color=black, key=0, label=Ref, source_paths="['Properties', 'Environment', 'Variables', 'BUCKET']"];
ExecutorLambdaFunction -> ExecutorLambdaServiceRole  [color=black, key=0, label=GetAtt, source_paths="['Properties', 'Role']"];
ExecutorLambdaInvokeConfig -> ExecutorLambdaFunction  [color=black, key=0, label=Ref, source_paths="['Properties', 'FunctionName']"];
}
